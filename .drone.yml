---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-pr
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.3.2; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: initialize
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: build-and-test-frontend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: security-scan
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.3.0
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/packages
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts/; fi
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/pull-requests/$${DRONE_PULL_REQUEST}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
trigger:
  event:
    - pull_request
type: docker

---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-main
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.3.2; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: initialize
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: build-and-test-frontend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: security-scan
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.3.0
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/packages
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest/** || true
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${DRONE_BRANCH}/latest
    depends_on:
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: update-gcs-master-latest
  - commands:
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - integration-bot.js update-enterprise-master $PLUGIN_NAME $DRONE_REPO_NAME
    depends_on:
      - update-gcs-master-latest
    environment:
      GCLOUD_SERVICE_KEY:
        from_secret: gcp_key
      GITHUB_BOT_EMAIL: grafanabot@grafana.com
      GITHUB_BOT_TOKEN:
        from_secret: github_token
      GITHUB_BOT_USER: grafanabot
    image: us.gcr.io/kubernetes-dev/integration-bot:v11
    name: integration-bot-main
trigger:
  branch:
    - master
    - main
  event:
    - push
type: docker

---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: test-cron
platform:
  arch: amd64
  os: linux
services:
  - environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/plugin-build-report-service:0.0.5
    name: plugin-build-report-service
steps:
  - commands:
      - if [ -z "$GRABPL_VERSION" ]; then GRABPL_VERSION=2.3.2; fi
      - if [ -z "$DOCKERIZE_VERSION" ]; then DOCKERIZE_VERSION=0.6.1; fi
      - mkdir -p bin
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$GRABPL_VERSION/grabpl
      - chmod +x bin/grabpl
      - mkdir ci
      - curl -fLO https://github.com/jwilder/dockerize/releases/download/v$${DOCKERIZE_VERSION}/dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - tar -C bin -xzvf dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - rm dockerize-linux-amd64-v$${DOCKERIZE_VERSION}.tar.gz
      - yarn install --frozen-lockfile --no-progress
      - rm -rf node_modules/@grafana/data/node_modules
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: initialize
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: build-and-test-frontend
  - commands:
      - echo "Starting veracode scan..."
      - apk add curl
      - "# Increase heap size or the scanner will die."
      - export _JAVA_OPTIONS=-Xmx4g
      - mkdir -p ci/jobs/security_scan
      - go mod vendor || true
      - curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan --skip-compile --quick --allow-dirty
      - "##"
      - "# Not failing builds now if we detect items we deem a problem in the scan output, but the following"
      - "# Would be an example"
      - "#"
      - '# grep "High Risk" ci/jobs/security_scan/sourclear_scan.out && false || true'
    depends_on:
      - build-and-test-frontend
    environment:
      SRCCLR_API_TOKEN:
        from_secret: srcclr_api_token
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: security-scan
  - commands:
      - ./node_modules/.bin/grafana-toolkit plugin:ci-build --finish
      - ./bin/grabpl plugin package
    depends_on:
      - build-and-test-frontend
    environment:
      GRAFANA_API_KEY:
        from_secret: grafana_api_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: package
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin create-build-report
    depends_on:
      - initialize
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: create-build-report
  - commands:
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - apt update
      - apt install -y jq git-lfs
      - PLUGIN_NAME=`jq -r .id ci/jobs/package/dist/plugin.json`
      - VERSION=`jq -r .info.version ci/jobs/package/dist/plugin.json`
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/$${DRONE_COMMIT_SHA}
      - gsutil rm -f gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest/** || true
      - echo "Copying artifacts to $${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest"
      - gsutil -m cp -r ci/packages/** gs://integration-artifacts/$${PLUGIN_NAME}/$${VERSION}/$${DRONE_BRANCH}/latest
    depends_on:
      - package
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-gcs-artifacts
  - commands:
      - '[ -n "${CRON_E2E_GRAFANA_VERSION}" ] && E2E_GRAFANA_VERSION="${CRON_E2E_GRAFANA_VERSION}" || true'
      - apt update
      - apt install -y jq git-lfs
      - ./bin/grabpl plugin e2etests
    depends_on:
      - package
    environment:
      CRON_E2E_GRAFANA_VERSION:
        from_secret: CRON_E2E_GRAFANA_VERSION
      E2E_GRAFANA_VERSION:
        from_secret: E2E_GRAFANA_VERSION
      GITHUB_TOKEN:
        from_secret: github_token
      GRAFANA_LICENSE_KEY:
        from_secret: license_key
    image: grafana/grafana-plugin-ci-e2e:1.3.0
    name: run-e2e
  - commands:
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - gsutil cp ci/jobs/package/dist/plugin.json gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/meta/plugin.json
      - gsutil -m rsync -r ci/packages gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/packages
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/videos gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
      - if [ -d cypress ]; then gsutil -m rsync -r cypress/screenshots gs://plugins-ci/drone/$${DRONE_REPO}/cron/$${DRONE_BRANCH}/$${DRONE_BUILD_NUMBER}/artifacts/; fi
    depends_on:
      - run-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: upload-artifacts
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-stats-and-artifacts
    depends_on:
      - publish-gcs-artifacts
      - upload-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-stats-and-artifacts
  - commands:
      - if [ -f failed ]; then return 1; else return 0; fi
    depends_on:
      - upload-artifacts
    image: grafana/grafana-plugin-ci:1.2.0-alpine
    name: check-e2e
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report
    depends_on:
      - store-stats-and-artifacts
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: store-build-report
  - commands:
      - ./bin/dockerize -wait tcp://plugin-build-report-service:5432 -timeout 120s
      - ./bin/grabpl plugin store-build-report --failed-pipeline
    depends_on:
      - build-and-test-frontend
      - security-scan
      - package
      - publish-gcs-artifacts
      - check-e2e
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: finalize-failed-build-report
    when:
      status:
        - failure
trigger:
  event:
    - cron
type: docker
---
image_pull_secrets:
  - dockerconfigjson
kind: pipeline
name: deploy-publish
platform:
  arch: amd64
  os: linux
steps:
  - commands:
      - '[ -z "$GRABPL_VERSION" ] && GRABPL_VERSION=2.3.2 || true'
      - "[ ! -d bin ] && mkdir -pv bin || true"
      - curl -fL -o bin/grabpl https://grafana-downloads.storage.googleapis.com/grafana-build-pipeline/v$${GRABPL_VERSION}/grabpl && chmod 0755 bin/grabpl
    environment:
      GRABPL_VERSION:
        from_secret: grabpl_version
    image: cibuilds/github:0.13.0
    name: get-grabpl
  - commands:
      - mkdir -p /hugo/content/docs/plugins/temp-name/v1.0.0
      - cp -r docs/sources /hugo/content/docs/plugins/temp-name/v1.0.0
      - make -C /hugo prod
    image: grafana/docs-base:latest
    name: build-docs
    pull: if-not-exists
  - commands:
      - echo "start publish backend GCS release"
      - apt update
      - apt install -y jq git-lfs
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - CI_BUCKET=gs://plugins-ci/drone/$${DRONE_REPO}/$${DRONE_BRANCH}/$${DRONE_BUILD_PARENT}
      - mkdir ci
      - gsutil cp -r "$CI_BUCKET/meta" ci
      - gsutil cp -r "$CI_BUCKET/packages" ci
      - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
      - VERSION=`jq -r .info.version ci/meta/plugin.json`
      - BACKEND=`jq -r .info.executable ci/meta/plugin.json`
      - if [ "$BACKEND" == "null" ]; then echo "Frontend plugin. Skipping backend release"; exit 0; fi
      - touch ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any
      - echo "Copying artifacts to $PLUGIN_NAME/release/$VERSION"
      - gsutil -m cp -r ci/packages/*windows* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/windows
      - gsutil -m cp -r ci/packages/*darwin* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/darwin
      - gsutil -m cp -r ci/packages/*linux* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/linux
      - gsutil -m cp -r ci/packages/*any* gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/any
      - rm ci/packages/windows ci/packages/darwin ci/packages/linux ci/packages/any
    depends_on:
      - build-docs
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-backend-gcs-release
  - commands:
      - echo "start publish frontend GCS release"
      - apt update
      - apt install -y jq
      - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
      - VERSION=`jq -r .info.version ci/meta/plugin.json`
      - BACKEND=`jq -r .info.executable ci/meta/plugin.json`
      - if [ -z "$GCP_KEY" ]; then echo "Missing GCS Publish Key"; exit -1; fi
      - printenv GCP_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - if [ "$BACKEND" != "null" ]; then echo "Backend plugin. Skipping frontend release"; exit 0; fi
      - echo "Copying artifacts to $PLUGIN_NAME/release/$VERSION"
      - gsutil -m cp ci/packages/$${PLUGIN_NAME}-$${VERSION}.zip gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/any/$${PLUGIN_NAME}-$${VERSION}.any.zip
      - gsutil -m cp ci/packages/$${PLUGIN_NAME}-$${VERSION}.zip.sha1 gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/any/$${PLUGIN_NAME}-$${VERSION}.any.zip.sha1
      - gsutil -m cp ci/packages/info.json gs://integration-artifacts/$${PLUGIN_NAME}/release/$${VERSION}/any/info-any.json
    depends_on:
      - publish-backend-gcs-release
    environment:
      GCP_KEY:
        from_secret: gcp_key
    image: google/cloud-sdk:352.0.0
    name: publish-frontend-gcs-release
  - commands:
      - echo "start publish github release"
      - apk add --no-cache jq
      - mkdir -p artifacts
      - cp ci/packages/* artifacts
      - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
      - VERSION=`jq -r .info.version ci/meta/plugin.json`
      - RELEASE_NOTES=`bin/grabpl plugin parse-changelog --changelog CHANGELOG.md --changelog-index 0`
      - git config user.email "grafanabot@grafana.com"
      - git config user.name "grafanabot"
      - git config user.password "$GITHUB_TOKEN"
      - git config --global credential.helper "/bin/sh /git_creds.sh"
      - "echo #!/bin/sh > /git_creds.sh"
      - echo "sleep 1" >> /git_creds.sh
      - echo "echo username=grafanabot" >> /git_creds.sh
      - echo "echo password=$GITHUB_TOKEN" >> /git_creds.sh
      - git checkout -b release-$${VERSION}
      - "# add dist, it is needed to get the right plugin.json info during gcom publish"
      - mkdir -p dist
      - cp -rp ci/meta/* dist/
      - git add --force dist/
      - git commit -m "automated release $${VERSION}"
      - git push -f origin release-$${VERSION}
      - git tag -f v$${VERSION}
      - git push -f origin v$${VERSION}
      - ghr -t $${GITHUB_TOKEN} -u $${DRONE_REPO_NAMESPACE} -r $${DRONE_REPO_NAME} -c $${DRONE_COMMIT_SHA} -n "$${PLUGIN_NAME} v$${VERSION}" -b "$RELEASE_NOTES" -delete v$${VERSION} ./artifacts/
    depends_on:
      - get-grabpl
      - publish-frontend-gcs-release
    environment:
      GITHUB_TOKEN:
        from_secret: github_token
    image: cibuilds/github:0.13.0
    name: publish-github-release
  - commands:
      - echo "start publish to GCOM"
      - if [ -z "$GCOM_PUBLISH_TOKEN" ]; then echo "Missing GCOM Publish Key"; exit -1; fi
      - if [ -z "$GITHUB_TOKEN" ]; then echo "Missing GITHUB_TOKEN"; exit -1; fi
      - if [ -z "$GCLOUD_SERVICE_KEY" ]; then echo "Missing GCLOUD_SERVICE_KEY"; exit -1; fi
      - printenv GCLOUD_SERVICE_KEY > /tmp/gcpkey.json
      - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
      - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
      - VERSION=`jq -r .info.version ci/meta/plugin.json`
      - /root/app/bin/grafana-publisher.js --auto publishremote $PLUGIN_NAME $VERSION $DRONE_REPO_NAME
    depends_on:
      - publish-github-release
    environment:
      GCLOUD_SERVICE_KEY:
        from_secret: gcp_key
      GCOM_PUBLISH_TOKEN:
        from_secret: gcom_token
      GITHUB_TOKEN:
        from_secret: github_token
    image: grafana/integration-grafana-publisher:v7
    name: publish-to-gcom
  # - commands:
  #     - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
  #     - VERSION=`jq -r .info.version ci/meta/plugin.json`
  #     - bin/grabpl plugin publish-docs --github-token $GITHUB_TOKEN --commit-author-name grafanabot --commit-author-email grafanabot@grafana.com --plugin-version $VERSION --plugin-id $PLUGIN_NAME
  #   depends_on:
  #     - get-grabpl
  #     - publish-to-gcom
  #   environment:
  #     GITHUB_TOKEN:
  #       from_secret: github_token
  #   image: grafana/integration-grafana-publisher:v7
  #   name: publish-docs-to-gcom
  - commands:
      - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
      - integration-bot.js update-enterprise-latest $PLUGIN_NAME $DRONE_REPO_NAME
    depends_on:
      - publish-to-gcom
    environment:
      GCLOUD_SERVICE_KEY:
        from_secret: gcp_key
      GITHUB_BOT_EMAIL: grafanabot@grafana.com
      GITHUB_BOT_TOKEN:
        from_secret: github_token
      GITHUB_BOT_USER: grafanabot
    image: us.gcr.io/kubernetes-dev/integration-bot:v11
    name: integration-bot-latest
trigger:
  event:
    - promote
  target:
    - publish
type: docker

---
get:
  name: grafana_api_key
  path: infra/data/ci/drone-plugins
kind: secret
name: grafana_api_key

---
get:
  name: gcp_key
  path: infra/data/ci/drone-plugins
kind: secret
name: gcp_key

---
get:
  name: license_key
  path: infra/data/ci/drone-plugins
kind: secret
name: license_key

---
get:
  name: github_token
  path: infra/data/ci/drone-plugins
kind: secret
name: github_token

---
get:
  name: srcclr_api_token
  path: infra/data/ci/drone-plugins
kind: secret
name: srcclr_api_token

---
get:
  name: .dockerconfigjson
  path: secret/data/common/gcr
kind: secret
name: dockerconfigjson

---
kind: signature
hmac: ece337836bc638e75bc009c3ed76acc88e5439190c222db32dbeccb6624cc6e3
