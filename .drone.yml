---
kind: pipeline
type: docker
name: build

trigger:
  event:
    include:
    - pull_request

steps:
- name: build
  image: node:18
  commands:
  - ./scripts/install-ci-deps-apt.sh
  - make install lint test build 
  environment:
    GCP_KEY:
      from_secret: gcp_key

---
kind: pipeline
type: docker
name: publish-dev

trigger:
  branch:
    include:
    - main
  event:
    include:
    - push

steps:
- name: build
  image: node:18
  commands:
  - ./scripts/install-ci-deps-apt.sh
  - make install lint test build sign package-latest generate-version
  environment:
    GCP_KEY:
      from_secret: gcp_key
    GRAFANA_ACCESS_POLICY_TOKEN:
      from_secret: signing_token

- name: publish to dev
  image: plugins/gcs
  settings:
    acl: allUsers:READER
    cache_control: no-store
    source: ./artifacts
    target: synthetic-monitoring-app/
    token:
      from_secret: gcs_sa_grafanalabsdev

- name: Open PR to update plugin version for all dev stacks
  image: us.gcr.io/kubernetes-dev/drone/plugins/updater
  settings:
    config_json: |-
      {
        "repo_owner": "grafana",
        "repo_name": "deployment_tools",
        "destination_branch": "master",
        "pull_request_branch_prefix": "ci-testing/synthetic-monitoring-plugin-release",
        "pull_request_enabled": true,
        "pull_request_existing_strategy": "ignore",
        "pull_request_message": "Triggered by ${DRONE_COMMIT_LINK}. NOTE: dev does not refer directly to an environment it refers to stacks associated with the dev 'wave'. See [here](https://github.com/grafana/deployment_tools/blob/master/ksonnet/environments/hosted-grafana/waves/provisioned-plugins/README.md#waves) for more info.",
        "pull_request_reviewers": ["rdubrock", "ckbedwell"],
        "update_jsonnet_attribute_configs": [
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/dev.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          }
        ]
      }
    github_app_id:
      from_secret: updater-app-id
    github_app_installation_id:
      from_secret: updater-app-installation-id
    github_app_private_key:
      from_secret: updater-app-private-key
image_pull_secrets:
  - dockerconfigjson
---
kind: pipeline
type: docker
name: publish-staging

trigger:
  event:
  - promote
  target:
  - staging

steps:
- name: build
  image: node:18
  commands:
  - ./scripts/install-ci-deps-apt.sh
  - make install lint test build sign package
  environment:
    GCP_KEY:
      from_secret: gcp_key
    GRAFANA_ACCESS_POLICY_TOKEN:
      from_secret: signing_token

- name: Open PR to update plugin version for all staging stacks
  image: us.gcr.io/kubernetes-dev/drone/plugins/updater
  settings:
    config_json: |-
      {
        "repo_owner": "grafana",
        "repo_name": "deployment_tools",
        "destination_branch": "master",
        "pull_request_branch_prefix": "ci-testing/synthetic-monitoring-plugin",
        "pull_request_enabled": true,
        "pull_request_existing_strategy": "ignore",
        "pull_request_message": "Triggered by ${DRONE_COMMIT_LINK}. NOTE: staging does not refer directly to an environment it refers to stacks associated with the staging 'wave'. See [here](https://github.com/grafana/deployment_tools/blob/master/ksonnet/environments/hosted-grafana/waves/provisioned-plugins/README.md#waves) for more info.",
        "pull_request_reviewers": ["rdubrock", "ckbedwell"],
        "update_jsonnet_attribute_configs": [
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/staging.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          }
        ]
      }
    github_app_id:
      from_secret: updater-app-id
    github_app_installation_id:
      from_secret: updater-app-installation-id
    github_app_private_key:
      from_secret: updater-app-private-key
image_pull_secrets:
  - dockerconfigjson
---
kind: pipeline
type: docker
name: publish-canary

trigger:
  event:
  - promote
  target:
  - canary

steps:
- name: build
  image: node:18
  commands:
  - ./scripts/install-ci-deps-apt.sh
  - make install lint test build sign package
  environment:
    GCP_KEY:
      from_secret: gcp_key
    GRAFANA_ACCESS_POLICY_TOKEN:
      from_secret: signing_token

- name: publish to prod
  image: plugins/gcs
  settings:
    acl: allUsers:READER
    source: ./artifacts
    target: synthetic-monitoring-app/
    token:
      from_secret: gcs_sa_grafanalabsglobal

- name: Open PR to update plugin version for all production stacks
  image: us.gcr.io/kubernetes-dev/drone/plugins/updater
  settings:
    config_json: |-
      {
        "repo_owner": "grafana",
        "repo_name": "deployment_tools",
        "destination_branch": "master",
        "pull_request_branch_prefix": "ci-testing/synthetic-monitoring-plugin",
        "pull_request_enabled": true,
        "pull_request_existing_strategy": "ignore",
        "pull_request_message": "Triggered by ${DRONE_COMMIT_LINK}. NOTE: prod does not refer directly to an environment it refers to stacks associated with the prod 'wave'. See [here](https://github.com/grafana/deployment_tools/blob/master/ksonnet/environments/hosted-grafana/waves/provisioned-plugins/README.md#waves) for more info.",
        "pull_request_reviewers": ["rdubrock", "ckbedwell"],
        "update_jsonnet_attribute_configs": [
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/prod.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          },
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/prod-canary.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          }
        ]
      }
    github_app_id:
      from_secret: updater-app-id
    github_app_installation_id:
      from_secret: updater-app-installation-id
    github_app_private_key:
      from_secret: updater-app-private-key
image_pull_secrets:
  - dockerconfigjson
---
kind: pipeline
type: docker
name: publish-prod

trigger:
  event:
  - promote
  target:
  - production

steps:
- name: build
  image: node:18
  commands:
  - ./scripts/install-ci-deps-apt.sh
  - make install lint test build sign package
  environment:
    GCP_KEY:
      from_secret: gcp_key
    GRAFANA_ACCESS_POLICY_TOKEN:
      from_secret: signing_token

- name: publish to prod
  image: plugins/gcs
  settings:
    acl: allUsers:READER
    source: ./artifacts
    target: synthetic-monitoring-app-prod/
    token:
      from_secret: gcs_sa_grafanalabsglobal

- name: Open PR to update plugin version for all production stacks
  image: us.gcr.io/kubernetes-dev/drone/plugins/updater
  settings:
    config_json: |-
      {
        "repo_owner": "grafana",
        "repo_name": "deployment_tools",
        "destination_branch": "master",
        "pull_request_branch_prefix": "auto-merge/synthetic-monitoring-plugin",
        "pull_request_enabled": true,
        "pull_request_existing_strategy": "ignore",
        "pull_request_message": "Triggered by ${DRONE_COMMIT_LINK}. NOTE: prod does not refer directly to an environment it refers to stacks associated with the prod 'wave'. See [here](https://github.com/grafana/deployment_tools/blob/master/ksonnet/environments/hosted-grafana/waves/provisioned-plugins/README.md#waves) for more info.",
        "pull_request_reviewers": ["rdubrock", "ckbedwell"],
        "update_jsonnet_attribute_configs": [
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/prod.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          },
          {
            "file_path": "ksonnet/environments/hosted-grafana/waves/provisioned-plugins/grafana-synthetic-monitoring-app/prod-canary.libsonnet",
            "jsonnet_key": "version",
            "jsonnet_value_file": "plugin_version.txt"
          }
        ]
      }
    github_app_id:
      from_secret: updater-app-id
    github_app_installation_id:
      from_secret: updater-app-installation-id
    github_app_private_key:
      from_secret: updater-app-private-key
  # - name: publish-to-gcom
  #   image: grafana/integration-grafana-publisher:v9
  #   commands:
  #       - echo "start publish to GCOM"
  #       - if [ -z "$GCOM_PUBLISH_TOKEN" ]; then echo "Missing GCOM Publish Key"; exit -1; fi
  #       - if [ -z "$GITHUB_TOKEN" ]; then echo "Missing GITHUB_TOKEN"; exit -1; fi
  #       - if [ -z "$GCLOUD_SERVICE_KEY" ]; then echo "Missing GCLOUD_SERVICE_KEY"; exit -1; fi
  #       - printenv GCLOUD_SERVICE_KEY > /tmp/gcpkey.json
  #       - gcloud auth activate-service-account --key-file=/tmp/gcpkey.json
  #       - PLUGIN_NAME=`jq -r .id ci/meta/plugin.json`
  #       - VERSION=`jq -r .info.version ci/meta/plugin.json`
  #       - /root/app/bin/grafana-publisher.js --auto publishremote $PLUGIN_NAME $VERSION $DRONE_REPO_NAME
  #     depends_on:
  #       - publish-github-release
  #     environment:
  #       GCLOUD_SERVICE_KEY:
  #           from_secret: gcp_key
  #       GCOM_PUBLISH_TOKEN:
  #           from_secret: signing_token
  #       GITHUB_TOKEN:
  #           from_secret: updater-app-private-key
image_pull_secrets:
  - dockerconfigjson
# Import secrets from Vault
---
kind: secret
name: gcs_sa_grafanalabsdev

get:
  path: infra/data/ci/synthetic-monitoring-app/gcs-service-account-dev
  name: credentials.json
---
kind: secret
name: gcs_sa_grafanalabsglobal

get:
  path: infra/data/ci/synthetic-monitoring-app/gcs-service-account-global
  name: credentials.json
---
kind: secret
name: gh_token

get:
  path: infra/data/ci/github/grafanabot
  name: pat
---
kind: secret
name: dockerconfigjson

get:
  path: secret/data/common/gcr
  name: .dockerconfigjson
---
kind: secret
name: updater-app-id

get:
  name: app-id
  path: infra/data/ci/github/updater-app
---
kind: secret
name: updater-app-installation-id

get:
  name: app-installation-id
  path: infra/data/ci/github/updater-app
---
kind: secret
name: updater-app-private-key

get:
  name: private-key
  path: infra/data/ci/github/updater-app

---
get:
    name: gcp_key
    path: infra/data/ci/drone-plugins
kind: secret
name: gcp_key
---
kind: signature
hmac: b41785f368c16dee2bf13d34533524252d2b97e519c37a46b04e34e873061677

...
