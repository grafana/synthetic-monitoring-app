version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@1.8.4

parameters:
  ssh-fingerprint:
    type: string
    default: ${GITHUB_SSH_FINGERPRINT}
  git-branch:
    default: non-existing-branch
    type: string

aliases:
  # Workflow filters
  # release-it adds a version tag without a leading "v", we want to run github deploys on those tags
  - &filter-non-existing-branch
    branches:
      only:
        - << pipeline.parameters.git-branch >>
  - &filter-only-tagged
    tags:
      only: /^(([0-9]+)\.([0-9]+)\.([0-9]+))/
    branches:
      ignore: /.*/
  - &filter-only-main
    branches:
      only: main
    tags:
      ignore: /.*/
  - &filter-only-pr
    branches:
      ignore: main
    tags:
      ignore: /.*/
  # Grafana toolkit adds a version tag with a leading "v" to github deploys, we only want to run releases on those tags
  - &filter-only-release
    tags:
      only: /^v(([0-9]+)\.([0-9]+)\.([0-9]+))/
    branches:
      ignore: /.*/

workflows:
  pr_build:
    jobs:
      - install_dependencies:
          filters: *filter-non-existing-branch
      - test:
          requires:
            - install_dependencies

  master_build:
    jobs:
      - install_dependencies:
          filters: *filter-non-existing-branch
      - version_bump:
          filters: *filter-non-existing-branch
          requires:
            - install_dependencies

  publish_release:
    jobs:
      - install_dependencies:
          filters: *filter-non-existing-branch
      - build:
          filters: *filter-non-existing-branch
      - publish_github_release:
          filters: *filter-non-existing-branch
          requires:
            - build

  register_with_gcom:
    jobs:
      - release_to_staging:
          filters: *filter-non-existing-branch
      - approve_release:
          type: approval
          requires:
            - release_to_staging
          filters: *filter-non-existing-branch
      - release_to_production:
          requires:
            - approve_release
          filters: *filter-non-existing-branch

executors:
  default_exec: # declares a reusable executor
    docker:
      - image: srclosson/grafana-plugin-ci-alpine:latest
    resource_class: xlarge
  e2e_exec:
    docker:
      - image: srclosson/grafana-plugin-ci-e2e:latest
  cloud_sdk_exec:
    docker:
      - image: google/cloud-sdk

jobs:
  install_dependencies:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            node -v
            mkdir ci
            yarn install --frozen-lockfile
      - save_cache:
          name: save node_modules
          paths:
            - ~/project/node_modules
          key: build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}

  test:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and test frontend
          command: yarn build

  build:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Build and test frontend
          command: |
            yarn build
            yarn sign
            yarn ci-build:finish
      - run:
          name: Package distribution
          command: |
            yarn ci-package
      - persist_to_workspace:
          root: .
          paths:
            - ci/jobs/package
            - ci/packages
            - ci/dist
            - ci/grafana-test-env
      - store_artifacts:
          path: ci

  version_bump:
    executor: default_exec
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.ssh-fingerprint >>
            - "48:1b:33:86:08:6d:24:64:14:15:cf:e1:d8:70:3f:19"
            - ${GITHUB_SSH_FINGERPRINT}
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "bump version and commit changelog"
          command: |
            git config user.email "circleci@grafana.com"
            git config --global user.name "CircleCI Automation"
            TAG=$(git tag --points-at HEAD)
            if [ "" == "$TAG" ]; then
                echo "Updating version and changelog"
                yarn release:ci
            else
                echo "Skipping versioning"
                exit 0
            fi
  report:
    executor: default_exec
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: Toolkit report
          command: |
            yarn ci-report
      - store_artifacts:
          path: ci

  publish_github_release:
    executor: default_exec
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << pipeline.parameters.ssh-fingerprint >>
            - "48:1b:33:86:08:6d:24:64:14:15:cf:e1:d8:70:3f:19"
            - ${GITHUB_SSH_FINGERPRINT}
      - attach_workspace:
          at: .
      - restore_cache:
          name: restore node_modules
          keys:
            - build-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - run:
          name: "Publish Release on GitHub"
          command: |
            yarn github-publish
      - store_artifacts:
          path: ci

  release_to_staging:
    executor: default_exec
    steps:
      # - gcp-cli/install
      # - gcp-cli/initialize
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publish release to staging"
          command: |
            apk --no-cache add curl
            apk --no-cache add bash
            ./scripts/staging-install.sh
  release_to_production:
    executor: default_exec
    steps:
      # - gcp-cli/install
      # - gcp-cli/initialize
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publish release to production"
          command: |
            apk --no-cache add curl
            apk --no-cache add bash
            /bin/bash ./scripts/production-release
